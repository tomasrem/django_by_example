"""
Django settings for bookmarks_app project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k!q$_!-3^82957cap7+15+3bo25ps51=1%l#4k^1+!vzerxnkm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['mysite.com' , 'localhost' , '127.0.0.1'] # django trust only localhost and 127 , its safety feature idk rly tho


# Application definition

INSTALLED_APPS = [
    'account.apps.AccountConfig', # django looks for authentification templates in django.contrib.admin  but placing our app before it we ensore that we will overwrite them 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'social_django' , 
    'django_extensions' , 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bookmarks_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookmarks_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'sk-SK'

TIME_ZONE = "Europe/Bratislava"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#LOGIN
LOGIN_REDIRECT_URL = 'dashboard' #tells django where to redirect after login 
LOGIN_URL = 'login' #url to redirect the users to login (eg. if you click on decorated view)
LOGOUT_URL = 'logout' #url to logout user

#email 
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

#Media 
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# django will try to log user in using each backend until it success or returns none
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend' , 
    'account.authentication.EmailAuthBackend' , # our custom backend
    'social_core.backends.facebook.FacebookOAuth2' ,  #facebook login backend
    'social_core.backends.twitter.TwitterOAuth',
    'social_core.backends.google.GoogleOAuth2',
]

# info from developers.facebook.com/apps/basics
SOCIAL_AUTH_FACEBOOK_KEY = '533235015345304'
SOCIAL_AUTH_FACEBOOK_SECRET = 'dbf1923d050778a4e53227885dedef46'
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']


# twitter secret api keys 
SOCIAL_AUTH_TWITTER_KEY = '4XQWGZQ7CNaS7ZpwRDetimOie'
SOCIAL_AUTH_TWITTER_SECRET = 'YiHtzhFee4K5UciEv0UvsBTFGyz8GkDvSfsy793SjdqYMVZZAx'

# google secret user id keys 
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '920782916586-tvpvafbvt1elauhk06u8e1c2p52nps45.apps.googleusercontent.com' # google client id
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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' #google client secret key


# creating a profile for user that registeres via the social auth 
SOCIAL_AUTH_PIPELINE = [
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. In some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    'social_core.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    'social_core.pipeline.social_auth.social_user',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    'social_core.pipeline.user.get_username',

    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social_core.pipeline.social_auth.associate_by_email',

    # Create a user account if we haven't found one yet.
    'social_core.pipeline.user.create_user',

    #create our profile instance for new user 

    'account.authentication.create_profile' , 


    # Create the record that associates the social account with the user.
    'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social_core.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',
]